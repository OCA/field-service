# Copyright (C) 2019 Brian McMaster
# Copyright (C) 2019 Open Source Integrators
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).

from odoo import api, fields, models, _


class SaleOrderLine(models.Model):
    _inherit = "sale.order.line"

    fsm_order_id = fields.Many2one(
        'fsm.order', 'Order', index=True,
        help="Field Service Order generated by the sales order item")
    is_field_service = fields.Boolean(
        "Is a Field Service", compute='_compute_is_field_service',
        store=True,
        help="""Sales Order item should generate an Order and/or
                Order Recurrence, depending on the product settings.""")

    @api.multi
    @api.depends('product_id.type')
    def _compute_is_field_service(self):
        for so_line in self:
            so_line.is_field_service = so_line.product_id.type == 'service'

    @api.depends('product_id.type')
    def _compute_product_updatable(self):
        for line in self:
            if line.product_id.type == 'service' and line.state == 'sale':
                line.product_updatable = False
            else:
                super(SaleOrderLine, line)._compute_product_updatable()

    @api.model
    def create(self, values):
        line = super(SaleOrderLine, self).create(values)
        if line.state == 'sale':
            line._field_service_generation()
        return line

    def _field_create_fsm_order_prepare_values(self):
        self.ensure_one()
        return {
            'customer_id': self.order_id.partner_id.id,
            'location_id': self.order_id.fsm_location_id.id,
            # 'request_early': ,
            'scheduled_date_start': self.order_id.date_fsm_request,
            'description': self.name,
            'template_id': self.product_id.fsm_order_template_id.id,
            'sale_line_id': self.id,
            'company_id': self.company_id.id,
        }

    @api.multi
    def _field_create_fsm_order(self):
        """ Generate fsm_order for the given so line, and link it.
            :return a mapping with the so line id and its linked fsm_order
            :rtype dict
        """
        result = {}
        for so_line in self:
            # create fsm_order
            values = so_line._field_create_fsm_order_prepare_values()
            fsm_order = self.env['fsm.order'].sudo().create(values)
            so_line.write({'fsm_order_id': fsm_order.id})
            # post message on SO
            msg_body = _(
                """Field Service Order Created (%s): <a href=
                   # data-oe-model=fsm.order data-oe-id=%d>%s</a>
                """) % (so_line.product_id.name, fsm_order.id, fsm_order.name)
            so_line.order_id.message_post(body=msg_body)
            # post message on fsm_order
            fsm_order_msg = _(
                """This order has been created from: <a href=
                   # data-oe-model=sale.order data-oe-id=%d>%s</a> (%s)
                """) % (so_line.order_id.id, so_line.order_id.name,
                        so_line.product_id.name)
            fsm_order.message_post(body=fsm_order_msg)
            result[so_line.id] = fsm_order
        return result

    @api.multi
    def _field_find_fsm_order(self):
        """ Find the fsm_order generated by the so lines. If no fsm_order
            linked, it will be created automatically.
            :return a mapping with the so line id and its linked fsm_order
            :rtype dict
        """
        # one search for all so lines
        fsm_orders = self.env['fsm.order'].search([
            ('sale_line_id', 'in', self.ids)])
        fsm_order_sol_mapping = {
            fsm_order.sale_line_id.id: fsm_order for fsm_order in fsm_orders}
        result = {}
        for so_line in self:
            # If the SO was confirmed, cancelled, set to draft then confirmed,
            # avoid creating a new fsm_order.
            fsm_order = fsm_order_sol_mapping.get(so_line.id)
            # If not found, create one fsm_order for the so line
            if not fsm_order:
                fsm_order = so_line._field_create_fsm_order()[so_line.id]
            result[so_line.id] = fsm_order
        return result

    @api.multi
    def _field_service_generation(self):
        """ For service lines, create the field service order. If it already
            exists, it simply links the existing one to the line.
        """
        for so_line in self.filtered(lambda sol: sol.is_field_service):
            # create order
            if so_line.product_id.field_service_tracking == 'order':
                so_line._field_find_fsm_order()
