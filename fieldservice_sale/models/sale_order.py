# Copyright (C) 2019 Brian McMaster
# Copyright (C) 2019 Open Source Integrators
# License AGPL-3.0 or later (http://www.gnu.org/licenses/agpl).

from odoo import api, fields, models, _


class SaleOrder(models.Model):
    _inherit = "sale.order"

    fsm_location_id = fields.Many2one(
        "fsm.location",
        string="Service Location",
        help="SO Lines generating a FSM order will be for this location",
    )
    date_fsm_request = fields.Datetime(
        string="Requested Service Date",
        readonly=True,
        states={"draft": [("readonly", False)], "sent": [("readonly", False)]},
        copy=False,
        default=fields.Datetime.now,
    )
    fsm_order_ids = fields.Many2many(
        "fsm.order",
        compute="_compute_fsm_order_ids",
        string="Field Service orders associated to this sale",
    )
    fsm_order_count = fields.Float(
        string="Field Service Orders", compute="_compute_fsm_order_ids"
    )

    @api.multi
    @api.depends("order_line.product_id")
    def _compute_fsm_order_ids(self):
        for order in self:
            orders = self.env["fsm.order"]
            orders += self.env["fsm.order"].search(
                [("sale_line_id", "in", order.order_line.ids)]
            )
            orders += self.env["fsm.order"].search([("sale_id", "=", order.id)])
            order.fsm_order_ids = orders
            order.fsm_order_count = len(order.fsm_order_ids)

    def _field_create_fsm_order_prepare_values(self):
        self.ensure_one()
        return {
            "customer_id": self.partner_id.id,
            "location_id": self.fsm_location_id.id,
            # 'request_early': ,
            "scheduled_date_start": self.date_fsm_request,
            "description": self.name,
            # 'template_id': self.product_id.fsm_order_template_id.id,
            "sale_id": self.id,
            "company_id": self.company_id.id,
        }

    @api.multi
    def _field_create_fsm_order(self):
        """ Generate fsm_order for the given Sale Order, and link it.
            :return a mapping with the sale order id and its linked fsm_order
            :rtype dict
        """
        result = {}
        for so in self:
            # create fsm_order
            values = so._field_create_fsm_order_prepare_values()
            fsm_order = self.env["fsm.order"].sudo().create(values)
            # post message on SO
            msg_body = (
                _(
                    """Field Service Order Created: <a href=
                   # data-oe-model=fsm.order data-oe-id=%d>%s</a>
                """
                )
                % (fsm_order.id, fsm_order.name)
            )
            so.message_post(body=msg_body)
            # post message on fsm_order
            fsm_order_msg = (
                _(
                    """This order has been created from: <a href=
                   # data-oe-model=sale.order data-oe-id=%d>%s</a>
                """
                )
                % (so.id, so.name)
            )
            fsm_order.message_post(body=fsm_order_msg)
            result[so.id] = fsm_order
        return result

    @api.multi
    def _field_find_fsm_order(self):
        """ Find the fsm_order generated by the Sale Order. If no fsm_order
            linked, it will be created automatically.
            :return a mapping with the so line id and its linked fsm_order
            :rtype dict
        """
        # one search for all Sale Orders
        fsm_orders = self.env["fsm.order"].search([("sale_id", "in", self.ids)])
        fsm_order_mapping = {
            fsm_order.sale_id.id: fsm_order for fsm_order in fsm_orders
        }
        result = {}
        for so in self:
            # If the SO was confirmed, cancelled, set to draft then confirmed,
            # avoid creating a new fsm_order.
            fsm_order = fsm_order_mapping.get(so.id)
            # If not found, create one fsm_order for the so
            if not fsm_order:
                fsm_order = so._field_create_fsm_order()[so.id]
            result[so.id] = fsm_order
        return result

    @api.multi
    def action_confirm(self):
        """ On SO confirmation, some lines generate field service orders. """
        result = super(SaleOrder, self).action_confirm()
        self.order_line._field_service_generation()
        return result

    @api.multi
    def action_view_fsm_order(self):
        fsm_orders = self.mapped("fsm_order_ids")
        action = self.env.ref("fieldservice.action_fsm_dash_order").read()[0]
        if len(fsm_orders) > 1:
            action["domain"] = [("id", "in", fsm_orders.ids)]
        elif len(fsm_orders) == 1:
            action["views"] = [(self.env.ref("fieldservice.fsm_order_form").id, "form")]
            action["res_id"] = fsm_orders.id
        else:
            action = {"type": "ir.actions.act_window_close"}
        return action
